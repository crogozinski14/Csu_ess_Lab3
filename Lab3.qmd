---
title: "Lab-03"
subtitle: ESS330
format: html
author:
  name: Chloe Rogozinski
  execute:
    echo: true
---

```{r}
#load packages
library(zoo)
library(tidyverse)
library(flextable)
```

## Question 1

Having access to historical and real time environmental data allows us to better understand how to better respond to changes and be more adaptable.When this data disappears, it limits how well we as a society can adapt and prepare for change.

```{r}
url = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv'
covid_data = read.csv(url)
```

## Question 2

```{r}
library(tidyverse); library(flextable)
data = read_csv('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv')
```

```{r}
#step 2 
txt <- "2022-01-01"
class(txt)

```

```{r}
my.date <- as.Date(txt)
class("2022-01-01")

my.state <- "Colorado"
class("Colorado")
```

# part 3

```{r}
Colorado <- covid_data |>
  filter(state == my.state) |>
  arrange(county, date) |>
  group_by(county) |>
  mutate(new_cases = cases - lag(cases), new_deaths = deaths - lag(deaths)) |>
  ungroup() |>
  mutate(new_cases = replace_na(new_cases, 0),
new_deaths = replace_na(new_deaths, 0))

head(Colorado)
```

```{r}
filter(Colorado, date == my.date) |>
  slice_max(cases, n = 5) |>
  select(Date = date, County = county, Cases = cases) |>
  flextable() |>
  set_caption("Most Total Cases")

filter(Colorado, date == my.date) |>
  slice_max(new_cases, n = 5) |>
  select(Date = date, County = county, 'New Cases' = new_cases) |>
  flextable() |>
  set_caption(caption = "Most New Cases")

```

# Part 4

```{r}
#table : top 5 cumulative cases
filter(Colorado, date == my.date) |>
  slice_max(cases, n = 5) |>
  select(Date = date, County = county, 'Total Cases' = cases) |>
  flextable() |>
  set_caption("Top 5 Colorado Counties by New COVID-19 Cases as of Selected Date")

#table 2 - top 5 new daily cases
filter(Colorado, date == my.date) |>
  slice_max(cases, n = 5) |>
  select(Date = date, County = county, 'New Cases' = new_cases) |>
  flextable() |>
  set_caption( "Top 5 Colorado Counties by New COVID-19 Cases as of Selected Date")

#Safe Counties Calc. 
safe_counties <- Colorado |>
  filter(date == my.date) |>
  filter(new_cases <= 100) |>
  select(County = county, New_Cases = new_cases)

num_safe_counties <- nrow(safe_counties)

#total new cases and cum cases
total_new_cases <- sum(Colorado |> filter(date == my.date) |> pull(new_cases), na.rm = TRUE)
total_cumulative_cases <- sum(Colorado |> filter(date == my.date) |> pull(cases), na.rm = TRUE)

#report
summary_report <- paste(
  "Daily COVID-19 Report for" , my.state, "on", my.date, "\n",
  "Total new cases:", total_new_cases, "\n"
, "Total cumulative cases:", total_cumulative_cases, "\n",
"Number of safe counties:", num_safe_counties, "\n",
"Safe counties include", paste(safe_counties$County, collapse = ", "))

#print
cat(summary_report)

#table of safe counties
flextable(safe_counties) |>
  set_caption("Counties Below the 100 New Cases per 100,000 Threshold")

```

##3

```{r}
#read population data
pop_url <- 'https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv'

pop_data <- read_csv(pop_url)
```
```{r}
# RELOAD RAW DATA to get STATE and COUNTY columns back
pop_url <- 'https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv'
pop_data <- read_csv(pop_url)


```




```{r}
#Clean codes
pop_data <- pop_data |>
  mutate(
    STATE = str_pad(STATE, width = 2, pad = "0"),
    COUNTY = str_pad(COUNTY, width = 3, pad = "0"),
    fips = paste0(STATE, COUNTY)
  ) |>
  filter(COUNTY != "000") |>
  select(
    County_Name = CTYNAME,
    population = POPESTIMATE2021,
    total_deaths_2021 = DEATHS2021,
    fips
  )


```

```{r}
Colorado <- Colorado |>
  mutate(fips = as.character(fips))


#join COVID data
Colorado_pop <- Colorado |>
  left_join(pop_data, by = "fips") |>
  mutate( cases_per_100k = (cases / population) * 100000,
          new_cases_per_100k = (new_cases / population) * 100000,
  new_deaths_per_100k = (new_deaths / population) * 100000)


#Creation of tables Table 1
filter(Colorado_pop, date == as.Date("2021-01-01")) |>
  slice_max(cases_per_100k, n = 5) |>
  select(Date = date, County = county, 'Cases per 100k' = cases_per_100k) |>
  flextable() |>
  set_caption("Top 5 Colorado Counties by Cumulative COVID-19 Cases per 100,000 Residents (as of Jan 1, 2021")

#Table 2
filter(Colorado_pop, date == as.Date("2021-01-01")) |>
  slice_max(new_cases_per_100k, n = 5)|>
  select(Date = date, County = county,`New Cases per 100k`= new_cases_per_100k) |>
  flextable() |>
  set_caption("Top 5 Colorado Counties by New COVID-19
Cases per 100,000 Residents (as of Jan 1, 2021)")

```

##4 calculate 14_day rolling sum of new cases

```{r}
library(zoo)
library(dplyr)

#calculate 14 day rolling sun of new cases per county
Colorado_rolling <- Colorado_pop |>
  group_by(county) |>
  arrange(date) |>
  mutate( new_cases_14day = rollsum(new_cases, 14, align = "right", fill = NA)) |>
  ungroup()

#get per 100k
Colorado_rolling <- Colorado_rolling |> mutate(new_cases_14day_per_100k = (new_cases_14day / population) * 100000)

#filter 
threshold_violators <- Colorado_rolling |>
  filter(date == as.Date("2021-01-01")) |>
  filter(new_cases_14day_per_100k > 100) |>
select(Date = date, County = county, `14-day New Cases per 100k`  = new_cases_14day_per_100k)

# View 
flextable(threshold_violators) |>
  set_caption("Counties Exceeding 100 New Cases per 100,000 Over the Past 14 Days (as of Jan 1, 2022)")

```

##5

```{r}

library(lubridate)
library(flextable)

# fips is character in Colorado_pop 
Colorado_pop <- Colorado_pop %>%
  mutate(fips = as.character(fips))

# Summarize total COVID deaths per county in 2021
covid_deaths_2021 <- Colorado_pop %>%
  filter(year(date) == 2021) %>%
  group_by(fips, county) %>%
  summarize(
    total_covid_deaths_2021 = sum(new_deaths, na.rm = TRUE),
    .groups = "drop"
  )


pop_data <- pop_data %>%
  mutate(fips = as.character(fips))  


pop_deaths <- pop_data %>%
  select(fips, County_Name, total_deaths_2021)

# Join COVID deaths to total deaths data
death_analysis <- covid_deaths_2021 %>%
  left_join(pop_deaths, by = "fips") %>%
  mutate(
    covid_death_pct = (total_covid_deaths_2021 / total_deaths_2021) * 100
  )

# Filter for counties where COVID deaths are 20% or more
high_covid_deaths <- death_analysis %>%
  filter(covid_death_pct >= 20)

# Create final flextable

flextable(
  high_covid_deaths %>%
    select(County = county, `COVID Death %` = covid_death_pct)  
) %>%
  set_caption("Counties Where COVID Deaths Accounted for 20% or More of Total Deaths in 2021")

```
# Answer: Scaling COVID-19 deaths against total deaths in each county shows how severe the pandemic was locally. But, due to troubleshooting issues, I was unable to get a clear answer on this question because my table kept coming out blank.

##6

```{r}
library(ggplot2)

state_covid = covid_data %>%
  group_by(date, state) %>%
  summarise(cases = sum(cases), .groups = "drop") %>%
  filter(state %in% c('New York', "Ohio", 'Colorado', "Alabama")) %>%
  group_by(state) %>%
  mutate(newCases = cases - lag(cases), roll = zoo::rollmean(newCases, k = 7, align = "right", fill = NA)) %>%
  ungroup()
```

```{r}
ggplot(state_covid, aes(x = date)) +
  geom_col(aes(y = newCases), fill = "pink", col = NA) +
  geom_line(aes(y = roll), col = "darkred", size = 1) +
  theme_linedraw() +
  facet_wrap(~state, nrow = 2, scales = "free_y") + labs(title = "Cumulaitive COVID-19 Cases", x = "Date", y = "Case Count")
```

```{r}
# Add STNAME to pop_data and filter to only those 4 states
pop_data <- pop_data %>%
  mutate(STNAME = case_when(
    substr(fips, 1, 2) == "36" ~ "New York",
    substr(fips, 1, 2) == "08" ~ "Colorado",
    substr(fips, 1, 2) == "01" ~ "Alabama",
    substr(fips, 1, 2) == "39" ~ "Ohio"
  )) %>%
  filter(!is.na(STNAME))  

pp <- pop_data %>%
  group_by(STNAME) %>%
  summarise(state_pop = sum(population), .groups = "drop") %>%
  inner_join(state_covid, by = c("STNAME" = "state")) %>%
  mutate(perCap = newCases / state_pop) %>%
  arrange(date) %>%  
  group_by(STNAME) %>%
  mutate(roll = zoo::rollmean(perCap, k = 7, align = "right", fill = NA)) %>%
  ungroup()


```

```{r}

ggplot(pp, aes(x = date, y = roll, color = STNAME, group = STNAME)) +
  geom_line(size = 1) +
  theme_linedraw() +
  labs(title = "7-Day Rolling Average of New COVID-19 Cases Per Capita",
       x = "Date", y = "New Cases per Capita",
       color = "State")

```

# Number 6 answer: Looking at raw case counts shows larger states like New York and Ohio with more cases, but when scaled per capita, smaller states like Alabama and Colorado sometimes had higher infection rates. Scaling by population gives a clearer picture of how widespread COVID-19 was in each state, showing that per capita rates can tell a very different story than total numbers.

## 7

```{r}
library(tidyverse)

meta = read_csv('https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv') %>%
  inner_join(covid_data %>% mutate(fips = as.character(fips)), by = "fips") %>% 
  group_by(date) %>%
  summarise(
    wmX_c = sum(LON * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),  
    wmY_c = sum(LAT * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
    cases = sum(cases, na.rm = TRUE),  
    .groups = "drop"  
  ) %>%
  arrange(date) %>%
  mutate(d = 1:n())  
ggplot(meta) +
  geom_point(aes(x = wmX_c, y = wmY_c, size = cases), color = "red", alpha = 0.25) +
  theme_linedraw() +
  theme(
    panel.background = element_rect(fill = "gray90"),  
    legend.position = "none"
  ) +
  labs(color = "Time", size = "Cases", x = "", y = "", 
       title = "Weighted Center of COVID-19 Cases")

```
# Number 7 Answer: The COVID-19 weighted mean center shows how the outbreak moved across the U.S. over time. It started on the East Coast, where the first big outbreaks happened, then shifted west and south as new hotspots appeared. This movement was likely driven by how the virus spread to different regions, population density, and how each state handled public health measures.
